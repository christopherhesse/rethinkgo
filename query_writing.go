package rethinkgo

// Insert inserts rows into the database.  If no value is specified for the
// primary key (by default "id"), a value will be generated by the server, e.g.
// "05679c96-9a05-4f42-a2f6-a9e47c45a5ae".
//
// Example usage:
//
//  var response r.WriteResponse
//  row := r.Map{"name": "Thing"}
//  err := r.Table("heroes").Insert(row).Run(session).One(&response)
func (e Exp) Insert(rows ...interface{}) Exp {
	return naryOperator(insertKind, e, rows...)
}

// Overwrite tells an Insert query to overwrite existing rows instead of
// returning an error.
//
// Example usage:
//
//  var response r.WriteResponse
//  row := r.Map{"name": "Thing"}
//  err := r.Table("heroes").Insert(row).Overwrite(true).Run(session).One(&response)
func (e Exp) Overwrite(overwrite bool) Exp {
	return naryOperator(upsertKind, e, overwrite)
}

// Atomic changes the required atomic-ness of a query.  By default queries will
// only be run if they can be executed atomically, that is, all at once.  If a
// query may not be executed atomically, the server will return an error.  To
// disable the atomic requirement, use .Atomic(false).
//
// Example usage:
//
//  var response r.WriteResponse
//  id := "05679c96-9a05-4f42-a2f6-a9e47c45a5ae"
//  replacement := r.Map{"name": r.Js("Thing")}
//  // The following will return an error, because of the use of r.Js
//  err := r.Table("heroes").GetById(id).Update(replacement).Run(session).One(&response)
//  // This will work
//  err := r.Table("heroes").GetById(id).Update(replacement).Atomic(false).Run(session).One(&response)
func (e Exp) Atomic(atomic bool) Exp {
	return naryOperator(atomicKind, e, atomic)
}

// Update updates rows in the database. Accepts a JSON document, a RQL
// expression, or a combination of the two.
//
// Example usage:
//
//  var response r.WriteResponse
//  replacement := r.Map{"name": "Thing"}
//  // Update a single row by id
//  id := "05679c96-9a05-4f42-a2f6-a9e47c45a5ae"
//  err := r.Table("heroes").GetById(id).Update(replacement).Run(session).One(&response)
//  // Update all rows in the database
//  err := r.Table("heroes").Update(replacement).Run(session).One(&response)
func (e Exp) Update(mapping interface{}) Exp {
	return naryOperator(updateKind, e, funcWrapper(mapping, 1))
}

// Replace replaces rows in the database. Accepts a JSON document or a RQL
// expression, and replaces the original document with the new one. The new
// row must have the same primary key as the original document.
//
// Example usage:
//
//  var response r.WriteResponse
//
//  // Replace a single row by id
//  id := "05679c96-9a05-4f42-a2f6-a9e47c45a5ae"
//  replacement := r.Map{"id": r.Row.Attr("id"), "name": "Thing"}
//  err := r.Table("heroes").GetById(id).Replace(replacement).Run(session).One(&response)
//
//  // Replace all rows in a table
//  err := r.Table("heroes").Replace(replacement).Run(session).One(&response)
func (e Exp) Replace(mapping interface{}) Exp {
	return naryOperator(replaceKind, e, funcWrapper(mapping, 1))
}

// Delete removes one or more rows from the database.
//
// Example usage:
//
//  var response r.WriteResponse
//
//  // Delete a single row by id
//  id := "5d93edbb-2882-4594-8163-f64d8695e575"
//  err := r.Table("heroes").GetById(id).Delete().Run(session).One(&response)
//
//  // Delete all rows in a table
//  err := r.Table("heroes").Delete().Run(session).One(&response)
//
//  // Find a row, then delete it
//  row := r.Map{"real_name": "Peter Benjamin Parker"}
//  err := r.Table("heroes").Filter(row).Delete().Run(session).One(&response)
func (e Exp) Delete() Exp {
	return naryOperator(deleteKind, e)
}
